#SYMBOL_NAME "Ecloud Scene XML Parser"

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	_SKIP_;
DIGITAL_INPUT	_SKIP_;			DIGITAL_OUTPUT	_SKIP_;

#USER_SIMPLSHARP_LIBRARY "EcloudUtils"

STRING_INPUT scene_id[10];		STRING_OUTPUT devices[64];
STRING_INPUT host_id[20];

SceneXML xml;
JsonUtil json;
Http hp;
 
FUNCTION split(string s,string delim)
{  
	integer start,pos,index;
    if (len(delim) <= 0)
	{
        return;
	}
    start = 0;
	index = 1;
    while(1)
	{
     	pos = find(delim,s);
        if (pos = 0)
		{
          break;
        }
        devices[index] = mid (s, 1, pos - 1);
        start = pos + len (delim);
		s = mid(s, start,len(s)-1);
		index = index + 1;
    }
	devices[index] = mid(s, pos + 1,len(s));	
}

change scene_id
{
	string fileName[64];
	fileName = "\\NVRAM\\" + host_id + "_" + scene_id + ".plist";
	hp.prepareDownload(fileName);
			
}

Callback Function onResponse(String s)
{
	integer size;
	string url[256];
	string fileName[64];
	fileName = "\\NVRAM\\" + host_id + "_" + scene_id + ".plist";

	url = json.parseURL(s);
	if(url!="")
	{
		size = hp.download(url,fileName);
		if (size>0)
		{
			split(xml.parseSceneToDevices(fileName),"|");
		}	
	}
	else
	{
		split(xml.parseSceneToDevices(fileName),"|");
	}
	
}

Function Init()
{
	RegisterDelegate(hp , OnRes , onResponse);
}

Function Main()
{
	WaitForInitializationComplete();
	Init();
}
 
